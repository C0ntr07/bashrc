#!/usr/bin/env bash

if [[ "$(whoami)" != "root" ]] ; then
  printf "\nYou must be root to run this installer. Either become root, or try sudo/pfexec.\n\n"
  exit 1
fi

if [[ -d "/etc/bash" ]] ; then
  printf "\n>> /etc/bash must not exist so not installing.\n\n"
  exit 2
fi

if command -v git >/dev/null ; then
  printf "===> Cloning git repository to /etc/bash ...\n"
  builtin cd "/etc" && \
    ( git clone --depth 1 git://github.com/fnichol/bashrc.git bash || \
    git clone http://github.com/fnichol/bashrc.git bash )
elif command -v curl >/dev/null && command -v python >/dev/null; then
  printf "===> Git not found, so downloading tarball to /etc/bash ...\n"
  mkdir -p "/etc/bash"
  curl -LsSf http://github.com/fnichol/bashrc/tarball/master | \
    tar xvz -C/etc/bash --strip 1
  printf "===> Determining version date from github api ...\n"
  tip_date="$(curl -sSL \
    http://github.com/api/v2/json/commits/show/fnichol/bashrc/HEAD | \
    python -c 'import sys; import json; j = json.loads(sys.stdin.read()); print j["commit"]["committed_date"];')"
  printf "TARBALL $tip_date" > "/etc/bash/tip.date"
else
  printf "\n>> Neither git nor curl (with python) could be found on path so not installing.\n\n"
  exit 3
fi

printf "===> Creating /etc/bash/bashrc.local for system-specific configuration ...\n"
cp "/etc/bash/bashrc.local.site" "/etc/bash/bashrc.local"

case "$(uname -s)" in
  Darwin)   color="green" ; remote_color="yellow" ;;
  Linux)    color="cyan"  ;;
  OpenBSD)  color="red"   ;;
  CYGWIN*)  color="black" ;;
  SunOS)
    if zoneadm list -pi | grep :global: >/dev/null ; then
      color="magenta" # root zone
    else
      color="cyan"    # non-global zone
    fi
    ;;
esac

printf "Setting prompt color to be \"$color\" ...\n"
perl -pi -e "s|^#?PROMPT_COLOR=.*$|PROMPT_COLOR=$color|g" \
  "/etc/bash/bashrc.local"
unset color

if [[ -n "$remote_color" ]] ; then
  printf "Setting remote prompt color to be \"$remote_color\" ...\n"
  perl -pi -e \
    "s|^#?REMOTE_PROMPT_COLOR=.*$|REMOTE_PROMPT_COLOR=$remote_color|g" \
    "/etc/bash/bashrc.local"
  unset remote_color
fi

case "$(uname -s)" in
  Darwin)
    p="/etc/bashrc"
    ;;
  Linux)
    if [[ -f "/etc/SuSE-release" ]] ; then
      p="/etc/profile.local"
    else
      p="/etc/profile"
    fi
    ;;
  SunOS|OpenBSD|CYGWIN*)
    p="/etc/profile"
    ;;
  *)
    printf ">>>> Don't know how to add source hook in this operating system.\n"
    exit 4
    ;;
esac

if grep -q '/etc/bash/bashrc' $p >/dev/null ; then
  printf ">> Mention of /etc/bash/bashrc found in \"$p\"\n"
  printf ">> You can add the following line to get sourced:\n"
  printf ">>   [[ -s \"/etc/bash/bashrc\" ]] && . \"/etc/bash/bashrc\""
else
  printf "===> Adding source hook into \"$p\" ...\n"
  cat >> $p <<END_OF_PROFILE
 
[[ -s "/etc/bash/bashrc" ]] && . "/etc/bash/bashrc"
END_OF_PROFILE
fi
unset p

printf "===> Updating bashrc to current ...\n"
bash -i -c "source /etc/bash/bashrc && bashrc update"

printf "\n\n    #---------------------------------------------------------------\n"
printf "    # Installation of bashrc complete. To activate either exit\n"
printf "    # this shell or type: 'source /etc/bash/bashrc'.\n"
printf "    #\n"
printf "    # To check for updates to bashrc, run: 'bashrc check'.\n"
printf "    #\n"
printf "    # To keep bashrc up to date, periodically run: 'bashrc update'.\n"
printf "    #---------------------------------------------------------------\n\n"
